<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cascv.oas.server.blockchain.mapper.EthWalletMapper">

  <resultMap id="ethWalletMap" type="com.cascv.oas.server.blockchain.model.EthWallet">
	<id column="uuid" property="uuid" />
	<result column="user_uuid" property="userUuid"/>
	<result column="private_key" property="privateKey"/>
	<result column="public_key" property="publicKey"/>
	<result column="mnemonic" property="mnemonicList"/>
	<result column="mnemonic_path" property="mnemonicPath"/>
	<result column="address" property="address"/>
	<result column="prefer_network" property="preferNetwork"/>
	<result column="crypto" property="crypto"/>
	<result column="created" property="created"/>
	<result column="updated" property="updated"/>
	<result column="unconfirmed_balance" property="unconfirmedBalance"/>
  </resultMap>
  
  <sql id="Base_Column_List">
    uuid, user_uuid, private_key, public_key, mnemonic, mnemonic_path, address, prefer_network, crypto, created,updated,unconfirmed_balance
  </sql>
  
  
  <!-- insert user -->
  <insert id="insertSelective" parameterType="com.cascv.oas.server.blockchain.model.EthWallet">
    insert into eth_wallet(
		  uuid,
    	user_uuid,
    	private_key,
    	public_key,
    	mnemonic,
    	mnemonic_path,
    	address,
    	crypto,
    	created,
    	updated
	)  values (
	  #{uuid,jdbcType=VARCHAR},
		#{userUuid,jdbcType=VARCHAR},
		#{privateKey,jdbcType=VARCHAR},
		#{publicKey,jdbcType=VARCHAR},
		#{mnemonicList,jdbcType=VARCHAR},
		#{mnemonicPath,jdbcType=VARCHAR},
		#{address,jdbcType=VARCHAR},
		#{crypto,jdbcType=INTEGER},
		#{created,jdbcType=VARCHAR},
		#{updated,jdbcType=VARCHAR}
	)
  </insert>

  <update id="update" parameterType="com.cascv.oas.server.blockchain.model.EthWallet">
    update eth_wallet
    	<trim prefix="set" suffixOverrides=",">
    		<if test="privateKey != null">
    			private_key = #{privateKey},
    		</if>
    		<if test="publicKey != null">
    			public_key = #{publicKey},
    		</if>
			<if test="address != null">
    			address = #{address},
    		</if>
    		<if test="crypto != null">
    			crypto = #{crypto}
    		</if>
			<if test="updated != null">
    			updated = #{updated},
    		</if>
			<if test="preferNetwork != null">
    			prefer_network = #{preferNetwork},
    		</if>
    		<if test="unconfirmedBalance != null">
    			unconfirmed_balance = #{unconfirmedBalance},
    		</if>
    	</trim>
    	where user_uuid = #{userUuid}
  </update>
  
  <!-- delete by uuid -->
  <delete id="deleteByUuid">
    delete from eth_wallet where uuid = #{uuid}
  </delete>

<!-- delete by userUuid -->
  <delete id="deleteByUserUuid">
    delete from eth_wallet where user_uuid = #{userUuid}
  </delete>
  
  <select id="selectByUuid" parameterType="java.lang.String" resultMap="ethWalletMap">
  	select 
      <include refid="Base_Column_List" />
    from eth_wallet where uuid = #{uuid}
  </select>

  <select id="selectByUserUuid" parameterType="java.lang.String" resultMap="ethWalletMap">
  	select 
      <include refid="Base_Column_List" />
    from eth_wallet where user_uuid = #{userUuid}
  </select>
  
</mapper>